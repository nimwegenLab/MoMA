#!/bin/bash

###
# This script parses the command options, mounts the required paths for MoMA, and calls the containerized instance of
# MoMA.
###

CONTAINER_TAG="moma:0.9.3"

printf "Started docker container wrapper script.\n"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

args_copy="$@"

SHORT=i:,o:,p:,r:
LONG=tmin:,tmax:,analysis:,headless:,trackonly:

OPTS=$(getopt --alternative --name moma --options $SHORT --longoptions $LONG -- "$@")

eval set -- "$OPTS"

CMD_ARGUMENTS=""

function get_bind_mount_arg {
  local path=$1
  echo "--mount type=bind,src=\"$(get_directory_path "$path")\",target=\"$(get_directory_path "$path")\"" # DOCKER BIND MOUNT
#  echo --bind $(get_directory_path "$path"):$(get_directory_path "$path") # SINGULARITY BIND MOUNT
  return 0
}

function get_directory_path {
    # This function takes the path of a file or directory. If file-path is passed it returns the path to the parent
    # directory. If a directory is passed, it returns the path to the directory itself.
    local TARGET_PATH=$1
    if [[ -d "$TARGET_PATH" ]]; then
      echo "$TARGET_PATH"
      return 0
    elif [[ -f "$TARGET_PATH" ]]; then
      RET=$(dirname "$TARGET_PATH")
      echo "$RET"
      return 0
    else
      # an invalid value was passed
      echo "ERROR: Path does not exist: ${TARGET_PATH}"
      exit 1
    fi
}

mount_string=""

while :
do
  if [[ $1 == "-i" || $1 == "-o" || $1 == "-p" || $1 == "-rl" ]]; then
    current_path=$(get_directory_path "$2")
    if [[ ! "${mount_string}" == *"${current_path}"* ]]; then
      mount_string="${mount_string} $(get_bind_mount_arg "${current_path}")"
    fi
    if [[ $1 == "-p" ]]; then
      properties_path="$2"
    fi
    shift 2
  elif [[ -z $1 ]]; then # we parse all arguments; exit loop
    break
  else
    shift
  fi
done

source <(grep "SEGMENTATION_MODEL_PATH" "${properties_path}")

mount_string="${mount_string} $(get_bind_mount_arg "${SEGMENTATION_MODEL_PATH}")"

mount_string="${mount_string} $(get_bind_mount_arg "${GRB_LICENSE_FILE}")"

mount_string="${mount_string} $(get_bind_mount_arg "${HOME}")" # mount home directory to access ~/.moma directory

echo "args_copy: ${args_copy}"
echo ""
echo ""
echo "mount_string: ${mount_string}"
echo ""

echo GRB_LICENSE_FILE: "${GRB_LICENSE_FILE}"

echo starting container
mkdir /tmp/models
eval docker run -it --rm --user $(id -u):$(id -g) --env "GRB_LICENSE_FILE" --net=host --env="DISPLAY" --volume="$HOME/.Xauthority:/root/.Xauthority:rw" --mount type=bind,source=/tmp/models,target=/build_dir/models --mount type=bind,source=./moma_in_container.sh,target=/moma/moma_in_container.sh "${mount_string}" "moma:v0.9.3" "${args_copy}"
echo stopping container

echo "DONE"

exit 0