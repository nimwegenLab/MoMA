package com.jug.exploration;

import com.jug.MoMA;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static com.jug.util.io.FileUtils.*;
import static java.util.Objects.isNull;

/**
 * This class provides adapter methods to enable testing MoMA from within test-code. This includes an adapter to start
 * MoMA with command line arguments from test-code.
 */
public class ExplorationTestHelpers {
    /**
     * Method to start MoMA with command-line arguments from test-code.
     * @param headless start MoMA in headless mode, if true; corresponds to command line argument -headless
     * @param inputPath input path; corresponds to command line argument -i
     * @param outputPath output path; corresponds to command line argument -o
     * @param tmin starting frame of the time range to analyze; corresponds to command line argument -tmin
     * @param tmax stop frame of the time range to analyze; corresponds to command line argument -tmax
     * @param deleteProbabilityMaps controls whether the probability map (which are generated by MoMA) should be deleted before starting MoMA; this is useful to force MoMA to generate the probability map on start; this is not a command line option, but for convenience during testing
     */
    public static void startMoma(boolean headless, String inputPath, String outputPath, Integer tmin, Integer tmax, boolean deleteProbabilityMaps) {
        startMoma(headless, inputPath, outputPath, tmin, tmax, deleteProbabilityMaps, null);
    }

    public static <T> void addToArgsIfNotNull(T argVal, String argName, List<String> args) {
        if (!isNull(argVal)) {
            args.add("-" + argName);
            args.add(argVal.toString());
        }
    }

    /**
     * Method to start MoMA with command-line arguments from test-code.
     * @param headless start MoMA in headless mode, if true; corresponds to command line argument -headless
     * @param inputPath input path; corresponds to command line argument -i
     * @param outputPath output path; corresponds to command line argument -o
     * @param tmin starting frame of the time range to analyze; corresponds to command line argument -tmin
     * @param tmax stop frame of the time range to analyze; corresponds to command line argument -tmax
     * @param deleteProbabilityMaps controls whether the probability map (which are generated by MoMA) should be deleted before starting MoMA; this is useful to force MoMA to generate the probability map on start; this is not a command line option, but for convenience during testing
     * @param additionalArgs additional command line arguments
     */
    public static void startMoma(boolean headless, String inputPath, String outputPath, Integer tmin, Integer tmax, boolean deleteProbabilityMaps, String[] additionalArgs) {
        if (deleteProbabilityMaps) {
            removeProbabilityMaps(Paths.get(inputPath));
        }

        List<String> args = new ArrayList<>();
        addToArgsIfNotNull(inputPath, "i", args);
        addToArgsIfNotNull(outputPath, "o", args);
        addToArgsIfNotNull(tmin, "tmin", args);
        addToArgsIfNotNull(tmax, "tmax", args);

        if (additionalArgs != null) {
            Collections.addAll(args, additionalArgs);
        }

        if (headless) {
            Collections.addAll(args, "-headless");
        }

        if (outputPath != null) {
            createDirectory(outputPath);
        }
        MoMA.main(args.toArray(new String[0]));
    }

    /**
     * Delete preexisting probability maps. During testing, we often want to test the generation
     * of the probability maps, which are cached to disk and loaded, if they exist for a given model.
     * This function removes those cached files to always run the U-Net preprocessing.
     *
     * @param path
     */
    private static void removeProbabilityMaps(Path path) {
        File parentFolder = new File(path.toFile().getParent());
        List<Path> matchingFiles = getMatchingFilesInDirectory(parentFolder.toPath(), "*__model_*.tif*");
        deleteFiles(matchingFiles);
    }
}
